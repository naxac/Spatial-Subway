-- -*- mode: lua; encoding: windows-1251 -*-
local function log(fmt, ...)
	get_console():execute("load ~ "..script_name().." : "..string.format(fmt, ...))
	get_console():execute("flush")
end
local function abort(fmt, ...)
	local reason = "ERROR! "..string.format(fmt, ...)
	log(reason)
	string.format('%s')
end

-- При добавлении локации в таблицу обязательно добавить инфопоршен: <имя_локации>_teleport
levels = {
l01_escape = {},
l02_garbage = {},
l03_agroprom = {},
l04_darkvalley = {},
l05_bar = {},
l06_rostok = {},
l07_military = {},
l08_yantar = {},
l10_radar = {},
l11_pripyat = {},
l12_stancia = {},
l12_stancia_2 = {}
}

local tmp_pos, vertexes

function getVertexes(level)
	local t_lv,t_gv = {},{}
	local i,v,ln = 0,0,""
	local sim = alife()
	local gg = game_graph()
	while gg:valid_vertex_id(i) do
		v = gg:vertex(i)
		ln = sim:level_name(v:level_id())
		if ln == level then
			t_lv[#t_lv+1] = v:level_vertex_id()
			t_gv[#t_gv+1] = i
		end
		i = i + 1
	end
	vertexes = {}
	vertexes.gv1 = math.min(unpack(t_gv))
	vertexes.gv2 = math.max(unpack(t_gv))
	vertexes.lv = math.max(unpack(t_lv))
end

function on_net_spawn()
	math.randomseed(device():time_global())
	
	local sim = alife()
	local lname = level.name()
	
	local se_obj = sim:story_object(30000)
	if se_obj then
		sim:release(se_obj, true)
	end
	
	if levels[lname] and not has_alife_info(lname.."_teleport") then
		db.actor:give_info_portion(lname.."_teleport")
		
		getVertexes(lname)
		tmp_pos = {}
		
		local cnt = math.random(6,10)
		while cnt > 0 do
			if spawn_teleport() then cnt = cnt - 1 end
		end
		
		if not has_alife_info("first_run_teleport") then
			local a = db.actor
			a:give_info_portion("first_run_teleport")
			sim:create("device_teleport",
						a:position(),
						a:level_vertex_id(),
						a:game_vertex_id(),
						a:id())
		end
		vertexes, tmp_pos = nil, nil
	end
	
	if arts_spawn then
		arts_spawn.spawn_artefacts()
	end
end

function add_zone(se_obj)
	local gv = se_obj.m_game_vertex_id
	local ln = alife():level_name(game_graph():vertex(gv):level_id())
	if levels[ln] and levels[ln][se_obj.id] == nil then
		levels[ln][se_obj.id] = {
			pos = se_obj.position,
			lv    = se_obj.m_level_vertex_id,
			gv   = gv
		}
	end
end

function spawn_teleport()
	local new_lv = math.random(1,vertexes.lv)
	local pos = level.vertex_position(new_lv)
	
	if db.actor:position():distance_to(pos) < 10 then return false end
	for _,p in ipairs(tmp_pos) do
		if p:distance_to(pos) < 60 then return false end
	end
	
	local new_gv,dist = 0,0
	local min_dist = 100000
	local gg = game_graph()
	for a = vertexes.gv1, vertexes.gv2 do
		dist = gg:vertex(a):game_point():distance_to(pos)
		if dist<min_dist then
			min_dist = dist
			new_gv = a
		end
	end
	if gg:valid_vertex_id(new_gv) then
		table.insert(tmp_pos, pos)
		local sobj = alife():create("zone_subway", pos, new_lv, new_gv)
		-- level.map_add_object_spot_ser(sobj.id, 'blue_location', sobj:name())
		this.rewrite_zone_subway(se_obj, "", 2.5)
		return true
	end
	return false
end

function check_item(obj)
	if obj:section()=="device_scaner" then
		if level.main_input_receiver() then
			level.start_stop_menu(level.main_input_receiver(), true)
		end
		alife():create("device_scaner", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())

		local zone_id, activated = bind_subway.get_active_zone()
		if activated == nil then
			level.start_stop_menu(ui_teleportator.UIPdaTeleport(false), true)
		elseif activated == true then
			inventory.need_update = true
			this.start_small_timer(0.4,
				function()
					level.start_stop_menu(ui_teleportator.UIPdaTeleport(true), true)
				end
			)
		else
			bind_subway.start_scan_timer(zone_id)
		end
	end
end
---------------------------------------------------------------------------------------
function remove_art()
	local art_clsids = {[clsid.artefact_s] = true, [clsid.artefact] = true}
	local del_item, item_cost
	local min_cost = 1000000
	db.actor:iterate_inventory(function(dummy, item)
		if art_clsids[item:clsid()] and inventory.item_on_belt(item) then
			item_cost = item:cost()
			if item_cost<min_cost then	
				del_item = item
				min_cost = item_cost
			end
		end
	end,
	db.actor)
	if del_item then
		news_manager.relocate_item(db.actor, "out", del_item:section())
		alife():release(alife():object(del_item:id()), true)
		return true
	end
	bind_subway.sms("Для перемещения необходимо поместить на пояс любой артефакт.")
	return false
end

function go_to(lname, id)
	local actor = db.actor
--	log("go_to: %s-%s", tostring(lname), tostring(id))
	local point = levels[lname][id]
		or abort("teleportator: not exist coordinates for level '%s', zone id [%s]", tostring(lname), tostring(id))
	if lname == level.name() then
		actor:set_actor_position(point.pos)
	else
		this.create_level_changer(point.pos, point.lv, point.gv, lname)
	end
end

-- если есть найденные аномалии вне ЧАЭС, то стартуем фриплей
function exit_from_aes()
	local tmp = {}
	for lvl, t in pairs(levels) do
		if string.find(lvl, "l12_stancia") == nil then
			for id, v in pairs(t) do
				table.insert(tmp, {lvl, id})
			end
		end
	end
	if #tmp > 0 then
		db.actor:give_info_portion("freeplay_start")
		local p = tmp[math.random(#tmp)]
		this.go_to(unpack(p))
	else
		db.gameover_credits_started = true
		game.start_tutorial("credits_seq")
	end
end
---------------------------------------------------------------------------------------
-- Короткий несохраняемый таймер в реальном времени
local timers = {}
function update(time)
	for k,v in pairs(timers) do
		if time>v.time then
			v.func(unpack(v.params))
			timers[k] = nil
		end
	end
end

local tmr_id = 0
function start_small_timer(delay, func, ...)
	local t = {}
	t.time = delay*1000 + time_global()
	t.func = func
	t.params = {...}
	timers["tmr"..tmr_id] = t
	tmr_id = tmr_id + 1
end
---------------------------------------------------------------------------------------
-- cse_alife_object
function read_cse_alife_object( data, pk )
	data.game_vertex_id  = pk:r_u16()
	data.distance        = pk:r_float()
	data.direct_control  = pk:r_s32()
	data.level_vertex_id	= pk:r_s32()
	data.object_flags    = pk:r_s32()
	data.custom_data     = pk:r_stringZ()
	data.story_id        = pk:r_s32()
	data.spawn_story_id  = pk:r_s32()
end
function write_cse_alife_object( data, pk )
	pk:w_u16     ( data.game_vertex_id )
	pk:w_float   ( data.distance )
	pk:w_s32     ( data.direct_control )
	pk:w_s32     ( data.level_vertex_id )
	pk:w_s32     ( data.object_flags )
	pk:w_stringZ ( data.custom_data )
	pk:w_s32     ( data.story_id )
	pk:w_s32     ( data.spawn_story_id )
end
-- cse_shape
function read_cse_shape( data, pk )
	local sh = {}
	local shape_type
	for i = 1, pk:r_u8() do
		shape_type = pk:r_u8()
		if shape_type == 0 then		-- sphere
			sh[i] = { ["shtype"] = shape_type,
				      ["center"] = pk:r_vec3(),
					  ["radius"] = pk:r_float() }
		else				-- box
			local m = matrix()
			pk:r_matrix( m )
			sh[i] = { ["shtype"]     = shape_type,
					  ["box_matrix"] = m }
		end
	end
	data.shapes = sh
end
function write_cse_shape( data, pk )
	local t = data.shapes
	local n = #t
	pk:w_u8( n )
	local sh
	for i = 1, n do
		sh = t[i]
		pk:w_u8( sh.shtype )
		if sh.shtype == 0 then
			pk:w_vec3( sh.center ); pk:w_float( sh.radius )
		else
			pk:w_matrix( sh.box_matrix )
		end
	end
end


function rewrite_zone_subway(se_obj, radius)
	local pk = net_packet()
	pk:w_begin(0)
	se_obj:STATE_Write(pk)
	pk:r_seek(2)

	local data = {}

	read_cse_alife_object( data, pk )
	read_cse_shape( data, pk )
	-- cse_alife_space_restrictor
	data.restrictor_type	= pk:r_u8()
	-- se_restrictor
	data.activated = pk:r_bool()

	data.shapes = {
		[1] = {
			["shtype"] = 0,
			["center"] = vector():set(0,0,0),
			["radius"] = radius
		}
	}

	pk:w_begin(0)
	write_cse_alife_object( data, pk )
	write_cse_shape( data, pk )
	-- cse_alife_space_restrictor
	pk:w_u8( data.restrictor_type )
	-- se_restrictor
	pk:w_bool( data.activated )
	pk:r_seek(2)
	se_obj:STATE_Read( pk, pk:w_tell() )
end


function create_level_changer( pos, lv, gv, lname )
	local obj = alife():create( "level_changer", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id() )
	
	local pk = net_packet()
	pk:w_begin(0)
	obj:STATE_Write(pk)
	pk:r_seek(2)
	
	local data = {}
	read_cse_alife_object( data, pk )
	read_cse_shape( data, pk )
	-- cse_alife_space_restrictor
	data.restrictor_type = pk:r_u8()
	-- cse_alife_level_changer
	datat.dest_game_vertex_id  = pk:r_u16()
	data.dest_level_vertex_id = pk:r_s32()
	data.dest_position        = pk:r_vec3()
	data.dest_direction       = pk:r_vec3()
	data.dest_level_name      = pk:r_stringZ()
	data.dest_graph_point     = pk:r_stringZ()
	data.silent_mode          = pk:r_u8()
	
	data.story_id = 30000
	data.shapes = {
		[1] = {
			["shtype"]         = 1,
			["box_matrix"] = matrix():set(
				vector():set(4, 0, 0),
				vector():set(0, 4, 0),
				vector():set(0, 0, 4),
				vector():set(0, 0, 0)
			)
		}
	}
	data.restrictor_type = 3  -- RestrictorTypeNone
	datat.dest_game_vertex_id = gv
	data.dest_level_vertex_id = lv
	data.dest_position = pos
	data.dest_level_name = lname
	data.dest_graph_point = "start_actor_99"
	data.silent_mode = 1
	
	pk:w_begin(0)
	write_cse_alife_object( data, pk )
	write_cse_shape( data, pk )
	-- cse_alife_space_restrictor
	pk:w_u8( data.restrictor_type )
	-- cse_alife_level_changer
	pk:w_u16     ( data.dest_game_vertex_id )
	pk:w_s32     ( data.dest_level_vertex_id )
	pk:w_vec3    ( data.dest_position )
	pk:w_vec3    ( data.dest_direction )
	pk:w_stringZ ( data.dest_level_name )
	pk:w_stringZ ( data.dest_graph_point )
	pk:w_u8      ( data.silent_mode )
	pk:r_seek( 2 )
	obj:STATE_Read( pk, pk:w_tell() )
end
